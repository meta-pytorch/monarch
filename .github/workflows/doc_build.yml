name: Docs

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: docs-${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Documentation
    uses: pytorch/test-infra/.github/workflows/linux_job_v2.yml@main
    with:
      timeout: 60
      runner: linux.g5.4xlarge.nvidia.gpu
      gpu-arch-type: "cuda"
      gpu-arch-version: "12.6"
      submodules: recursive
      script: |
        # Source common setup functions
        source scripts/common-setup.sh

        # Setup build environment with Python 3.10
        setup_build_environment 3.10

        # Install documentation dependencies
        pip install -r docs/requirements.txt

        # Set environment variables for documentation build with CUDA support
        export RUSTFLAGS="-Zthreads=16"
        export _GLIBCXX_USE_CXX11_ABI=1
        export USE_CUDA=1
        export USE_TENSOR_ENGINE=1

        # Generate documentation for all crates in the workspace
        # This will include CUDA-dependent crates (cuda-sys, nccl-sys, torch-sys-cuda)
        echo "Building documentation for all workspace crates including CUDA-dependent ones..."
        cargo doc --workspace --no-deps --document-private-items --features cuda

        # Verify that CUDA-related crates were documented
        echo "Checking for CUDA-related documentation..."
        ls -la target/doc/ | grep -E "(cuda_sys|nccl_sys|torch_sys_cuda)" || echo "CUDA crate docs may not be present"

        # Create an index.html file in the target/doc directory to serve as the main entry point
        echo '<meta http-equiv="refresh" content="0; url=hyperactor/index.html">' > target/doc/index.html

        # Ensure the target/doc directory exists in the expected location for Sphinx
        mkdir -p docs/source/target
        cp -r target/doc docs/source/target/

        # List all generated documentation for verification
        echo "Generated documentation for the following crates:"
        ls -1 target/doc/ | grep -v "\.html\|\.css\|\.js\|static" | sort

        # Build Sphinx documentation
        cd docs
        make html

        # Create artifact directory and copy built docs
        mkdir -p ${RUNNER_ARTIFACT_DIR}/docs
        cp -r build/html/* ${RUNNER_ARTIFACT_DIR}/docs/

      upload-artifact: docs

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: docs

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
