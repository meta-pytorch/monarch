name: Docs

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: docs-${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Documentation
    uses: pytorch/test-infra/.github/workflows/linux_job_v2.yml@main
    with:
      timeout: 120
      runner: linux.g5.4xlarge.nvidia.gpu
      gpu-arch-type: cuda
      gpu-arch-version: "12.6"
      submodules: recursive
      script: |
        # Source common setup functions
        source scripts/common-setup.sh

        # Setup test environment (provides basic dependencies)
        setup_test_environment

        # Setup Python dependencies
        python -m pip install --upgrade pip
        pip install -r build-requirements.txt
        pip install -r docs/requirements.txt

        # Setup Rust toolchain
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain nightly
        source ~/.cargo/env
        rustup component add rustfmt clippy

        # Set environment variables for CUDA build
        export USE_CUDA=1
        export USE_TENSOR_ENGINE=1
        export RUSTFLAGS="-Zthreads=16"
        export _GLIBCXX_USE_CXX11_ABI=1
        export CUDA_LIB_DIR=/usr/lib64

        # Generate documentation for all crates including CUDA-dependent ones
        cargo doc --workspace --no-deps

        # Ensure the target/doc directory exists in the expected location for Sphinx
        mkdir -p docs/source/target
        cp -r target/doc docs/source/target/

        # Build Sphinx Docs
        cd docs
        make html
        cd ..

        # Copy docs to expected artifact location
        mkdir -p ${RUNNER_ARTIFACT_DIR}
        cp -r docs/build/html/* ${RUNNER_ARTIFACT_DIR}/

  upload:
    needs: build
    name: Upload Documentation Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: docs-html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-html

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
